nextflowVersion = '>=20'

manifest {
    homePage = 'https://gitbio.ens-lyon.fr/LBMC/nextflow'
    description = 'pipeline to '
    mainScript = 'main.nf'
    version = '0.0.0'
}

report {
  enabled = true
  report.overwrite = true
  file = "results/report.html"
}

profiles {
  docker {
    docker.temp = "auto" // auto pour créer un directory temporaire à chaque fois que le container est créé
    docker.enabled = true
    docker.runOptions = '-u $(id -u):$(id -g)'
    process {
      errorStrategy = 'finish' // pour donner une directive si la tâche fail, ici finish attend que les tâches 
                              // en cours  soient terminées et arrête le pipeline en donnant un message d'erreur.
      memory = '16GB'
      withLabel: big_mem_mono_cpus {
        cpus = 1
      }
      withLabel: big_mem_multi_cpus {
        cpus = 4
      }
      withLabel: small_mem_mono_cpus {
        cpus = 1
        memory = '2GB'
      }
      withLabel: small_mem_multi_cpus {
        cpus = 4
        memory = '2GB'
      }
            withLabel: mid_mem_mono_cpus {
        cpus = 1
        memory = '8GB'
      }
      withLabel: mid_mem_multi_cpus {
        cpus = 4
        memory = '8GB'
      }
       withLabel: gpus {
        maxForks = 1
        containerOptions = '--gpus all'
  } 
    }
  }
  podman {
    podman.enabled = true
    process {
      errorStrategy = 'finish'
      memory = '16GB'
      withLabel: big_mem_mono_cpus {
        cpus = 1
      }
      withLabel: big_mem_multi_cpus {
        cpus = 4
      }
      withLabel: small_mem_mono_cpus {
        cpus = 1
        memory = '2GB'
      }
      withLabel: small_mem_multi_cpus {
        cpus = 4
        memory = '2GB'
      }
            withLabel: mid_mem_mono_cpus {
        cpus = 1
        memory = '8GB'
      }
      withLabel: mid_mem_multi_cpus {
        cpus = 4
        memory = '8GB'
      }
    }
  }
  singularity {
    singularity.enabled = true
    singularity.cacheDir = "./bin/"
    singularity.bind = "/home"
    process {
      errorStrategy = 'finish'
      memory = '16GB'
      withLabel: big_mem_mono_cpus {
        cpus = 1
      }
      withLabel: big_mem_multi_cpus {
        cpus = 8
      }
      withLabel: small_mem_mono_cpus {
        cpus = 1
        memory = '2GB'
      }
      withLabel: small_mem_multi_cpus {
        cpus = 8
        memory = '2GB'
      }
      withLabel: mid_mem_mono_cpus {
        cpus = 1
        memory = '8GB'
      }
      withLabel: mid_mem_multi_cpus {
        cpus = 8
        memory = '8GB'
      }

      withLabel: gpus {
        maxForks = 1
        cpus = 8
        containerOptions = '--nv'
  } 
    }
  }
  psmn {
    charliecloud.enabled = true
    charliecloud.cacheDir = "/Xnfs/abc/charliecloud"
    charliecloud.runOptions = "--bind /scratch:/scratch"
    charliecloud.readOnlyInputs = true
    process{
      errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
      maxRetries = 3
      withLabel: big_mem_mono_cpus {
        executor = "slurm"
        cpus = 1
        memory = "128GB"
        time = "24h"
        clusterOptions = "--partition=Lake"
      }
      withLabel: big_mem_multi_cpus {
        executor = "slurm"
        cpus = 32
        memory = "192GB"
        time = "24h"
        clusterOptions = "--partition=Lake"
      }
      withLabel: small_mem_mono_cpus {
        executor = "slurm"
        cpus = 1
        memory = "16GB"
        time = "24h"
        clusterOptions = "--partition=Lake"
      }
      withLabel: small_mem_multi_cpus {
        executor = "slurm"
        cpus = 32
        memory = "16GB"
        time = "24h"
        clusterOptions = "--partition=Lake"
      }
    }
  }
  ccin2p3 {
    singularity.enabled = true
    singularity.cacheDir = "$baseDir/../bin/"
    singularity.runOptions = "--bind /pbs,/sps,/scratch,/tmp"
    process{
      maxRetries = 3
      withLabel: big_mem_mono_cpus {
        scratch = true // pour exécuter les tâches une à une dans un directory temporaire en local
        stageInMode = "copy" // définir comment les fichiers sont ammenés dans le répertoire de travail
                            // du process, copy mettre à disposition en les copiant
        stageOutMode = "rsync" // définir comment les fichiers sont sortis du directory temporaire local vers
                              // vers le répertoire de travail, rsync pour les copier
        executor = "slurm"
        clusterOptions = "--licenses=sps"
        cpus = 1
        memory = "8GB"
        queue = "htc"
      }
      withLabel: big_mem_multi_cpus {
        scratch = true
        stageInMode = "copy"
        stageOutMode = "rsync"
        executor = "slurm"
        clusterOptions = "--licenses=sps"
        cpus = 1
        memory = "8GB"
        queue = "htc"
      }
      withLabel: small_mem_mono_cpus {
        scratch = true
        stageInMode = "copy"
        stageOutMode = "rsync"
        executor = "slurm"
        clusterOptions = "--licenses=sps"
        cpus = 1
        memory = "8GB"
        queue = "htc"
      }
      withLabel: small_mem_multi_cpus {
        scratch = true
        stageInMode = "copy"
        stageOutMode = "rsync"
        executor = "slurm"
        clusterOptions = "--licenses=sps"
        cpus = 1
        memory = "8GB"
        queue = "htc"
      }
    }
  }
  pollux {
    singularity.enabled = true
    singularity.cacheDir = "/opt/singularity/"
    singularity.runOptions = "-B /home -B /data -B /scratch -B /var/exports/scratch"
    errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
    maxRetries = 3
    process {
      errorStrategy = 'finish'
      memory = '16GB'
      withLabel: big_mem_mono_cpus {
        executor = "slurm"
        time = "24h"
        cpus = 1
        memory = '16GB'
      }
      withLabel: big_mem_multi_cpus {
        executor = "slurm"
        time = "24h"
        cpus = 16
        memory = '32GB'
      }
      withLabel: small_mem_medium_cpus {
        executor = "slurm"
        time = "24h"
        cpus = 8
        memory = '8GB'
      }
      withLabel: huge_mem_multi_cpus {
        executor = "slurm"
        time = "24h"
        cpus = 8
        memory = '50GB'
      }
      withLabel: small_mem_mono_cpus {
        executor = "slurm"
        time = "24h"
        cpus = 1
        memory = '8GB'
      }
      withLabel: small_mem_multi_cpus {
        executor = "slurm"
        time = "24h"
        cpus = 16
        memory = '8GB'
      }
      withLabel: gpus {
        executor = "slurm"
        maxForks = 1
        containerOptions = '--nv'
      }
    }
  }
  pollux_noslurm {
    singularity.enabled = true
    singularity.cacheDir = "./bin/"
    singularity.runOptions = "--bind /data,/scratch"
    process {
      errorStrategy = 'finish'
      memory = '32GB'
      withLabel: big_mem_mono_cpus {
        cpus = 1
      }
      withLabel: big_mem_multi_cpus {
        cpus = 16
      }
      withLabel: small_mem_mono_cpus {
        cpus = 1
        memory = '2GB'
      }
      withLabel: small_mem_multi_cpus {
        cpus = 8
        memory = '2GB'
      }
      withLabel: gpus {
        maxForks = 1
        containerOptions = '--nv' // spécifie toute option d'exécution du conteneur
      }
    }
  }
  pollux_singularity {
    singularity.enabled = true
    singularity.cacheDir = "/opt/singularity/"
    singularity.runOptions = "-B /home -B /data"
    process {
      memory = '16GB'
      withLabel: big_mem_mono_cpus {
        cpus = 1
      }
      withLabel: big_mem_multi_cpus {
        cpus = 8
      }
      withLabel: small_mem_mono_cpus {
        cpus = 1
        memory = '2GB'
      }
      withLabel: small_mem_multi_cpus {
        cpus = 8
        memory = '2GB'
      }
      withLabel: mid_mem_mono_cpus {
        cpus = 1
        memory = '8GB'
      }
      withLabel: mid_mem_multi_cpus {
        cpus = 4
        memory = '8GB'
      }
    }
  }
}
